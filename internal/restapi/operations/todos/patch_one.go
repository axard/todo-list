// Code generated by go-swagger; DO NOT EDIT.

package todos

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PatchOneHandlerFunc turns a function with the right signature into a patch one handler
type PatchOneHandlerFunc func(PatchOneParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PatchOneHandlerFunc) Handle(params PatchOneParams) middleware.Responder {
	return fn(params)
}

// PatchOneHandler interface for that can handle valid patch one params
type PatchOneHandler interface {
	Handle(PatchOneParams) middleware.Responder
}

// NewPatchOne creates a new http.Handler for the patch one operation
func NewPatchOne(ctx *middleware.Context, handler PatchOneHandler) *PatchOne {
	return &PatchOne{Context: ctx, Handler: handler}
}

/*PatchOne swagger:route PATCH /{id} todos patchOne

PatchOne patch one API

*/
type PatchOne struct {
	Context *middleware.Context
	Handler PatchOneHandler
}

func (o *PatchOne) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewPatchOneParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PatchOneBody patch one body
//
// swagger:model PatchOneBody
type PatchOneBody struct {

	// completed
	Completed *bool `json:"completed,omitempty"`

	// description
	// Min Length: 0
	Description *string `json:"description,omitempty"`
}

// Validate validates this patch one body
func (o *PatchOneBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PatchOneBody) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(o.Description) { // not required
		return nil
	}

	if err := validate.MinLength("body"+"."+"description", "body", string(*o.Description), 0); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PatchOneBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PatchOneBody) UnmarshalBinary(b []byte) error {
	var res PatchOneBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
